{
    "$schema": "http://json-schema.org/schema",
    "$id": "create-plugin",
    "title": "",
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "description": "Name of the new plugin",
        "$default": {
          "$source": "argv",
          "index": 0
        },
        "x-prompt": "What name would you like to use for the plugin?",
        "pattern": "^[a-zA-Z].*$"
      },
      "author": {
        "type": "string",
        "description": "Plugin author"
      },
      "addTranslations": {
        "type": "boolean",
        "description": "Add translation files to the assets folder.",
        "default": false
      },
      "publishable": {
        "type": "boolean",
        "default": false,
        "description": "Generate a publishable plugin library."
      },
      "buildable": {
        "type": "boolean",
        "default": false,
        "description": "Generate a buildable plugin library."
      },
      "prefix": {
        "type": "string",
        "format": "html-selector",
        "description": "The prefix to apply to generated selectors.",
        "alias": "p"
      },
      "skipFormat": {
        "description": "Skip formatting files.",
        "type": "boolean",
        "default": false
      },
      "addModuleSpec": {
        "description": "Add a module spec file.",
        "type": "boolean",
        "default": false
      },
      "lazy": {
        "type": "boolean",
        "default": false,
        "description": "Add `RouterModule.forChild` when set to true, and a simple array of routes when set to false."
      },
      "parentModule": {
        "type": "string",
        "description": "Update the router configuration of the parent module using `loadChildren` or `children`, depending on what `lazy` is set to.",
        "alias": "parent"
      },
      "tags": {
        "type": "string",
        "description": "Add tags to the plugin (used for linting)."
      },
      "unitTestRunner": {
        "type": "string",
        "enum": [
          "karma",
          "jest",
          "none"
        ],
        "description": "Test runner to use for unit tests.",
        "default": "jest"
      },
      "importPath": {
        "type": "string",
        "description": "The plugin name used to import it, like `@plugins/my-awesome-plugin`. Must be a valid npm name."
      },
      "strict": {
        "type": "boolean",
        "description": "Create a plugin with stricter type checking and build optimization options.",
        "default": true
      },
      "linter": {
        "description": "The tool to use for running lint checks.",
        "type": "string",
        "enum": [
          "eslint",
          "none"
        ],
        "default": "eslint"
      },
      "compilationMode": {
        "description": "Specifies the compilation mode to use. If not specified, it will default to `partial` for publishable libraries and to `full` for buildable libraries. The `full` value can not be used for publishable libraries.",
        "type": "string",
        "enum": [
          "full",
          "partial"
        ]
      },
      "setParserOptionsProject": {
        "type": "boolean",
        "description": "Whether or not to configure the ESLint `parserOptions.project` option. We do not do this by default for lint performance reasons.",
        "default": false
      },
      "addTailwind": {
        "type": "boolean",
        "description": "Whether to configure Tailwind CSS for the application. It can only be used with buildable and publishable libraries. Non-buildable libraries will use the application's Tailwind configuration.",
        "default": false
      },
      "displayBlock": {
        "description": "Specifies if the component generated style will contain `:host { display: block; }`. Disclaimer: This option is only valid when `--standalone` is set to `true`.",
        "type": "boolean",
        "default": false,
        "alias": "b"
      },
      "inlineStyle": {
        "description": "Include styles inline in the component.ts file. Only CSS styles can be included inline. By default, an external styles file is created and referenced in the component.ts file. Disclaimer: This option is only valid when `--standalone` is set to `true`.",
        "type": "boolean",
        "default": false,
        "alias": "s"
      },
      "inlineTemplate": {
        "description": "Include template inline in the component.ts file. By default, an external template file is created and referenced in the component.ts file. Disclaimer: This option is only valid when `--standalone` is set to `true`.",
        "type": "boolean",
        "default": false,
        "alias": "t"
      },
      "viewEncapsulation": {
        "description": "The view encapsulation strategy to use in the new component. Disclaimer: This option is only valid when `--standalone` is set to `true`.",
        "enum": [
          "Emulated",
          "None",
          "ShadowDom"
        ],
        "type": "string",
        "alias": "v"
      },
      "changeDetection": {
        "description": "The change detection strategy to use in the new component. Disclaimer: This option is only valid when `--standalone` is set to `true`.",
        "enum": [
          "Default",
          "OnPush"
        ],
        "type": "string",
        "default": "Default",
        "alias": "c"
      },
      "style": {
        "description": "The file extension or preprocessor to use for style files, or `none` to skip generating the style file. Disclaimer: This option is only valid when `--standalone` is set to `true`.",
        "type": "string",
        "default": "css",
        "enum": [
          "css",
          "scss",
          "sass",
          "less",
          "none"
        ]
      },
      "skipTests": {
        "type": "boolean",
        "description": "Do not create `spec.ts` test files for the new component. Disclaimer: This option is only valid when `--standalone` is set to `true`.",
        "default": false
      },
      "selector": {
        "type": "string",
        "format": "html-selector",
        "description": "The HTML selector to use for this component. Disclaimer: This option is only valid when `--standalone` is set to `true`."
      }
    },
    "required": [
      "name"
    ]
  }
