#!/usr/bin/env bash

# --------------------------------------------------------------------
# Test extracting and building the source code of the workspace-hxp application.
# It ensures that the extracted source code works correctly.
# --------------------------------------------------------------------

WORKSPACE_HXP_ZIP_PATH="./workspace-hxp.zip"
WORKSPACE_HXP_APP_PATH="../workspace-hxp"
REPO_PATH=$(realpath "$(pwd)")
SCRIPTS_CI_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"

source $SCRIPTS_CI_PATH/job_hooks/helpers.sh

# Zip and extract the workspace hxp application
npm run mr content-src-code-zipper -- --output "${WORKSPACE_HXP_ZIP_PATH}" -e workspace-hxp --logLevel silly || exit 1

echo "🧹 Deleting ${WORKSPACE_HXP_APP_PATH} (if exists) ..."
rm -rf ${WORKSPACE_HXP_APP_PATH}
echo "✅ done Deleting"

echo  "🔓Unzipping the created archive to ${WORKSPACE_HXP_APP_PATH} ..."
mkdir ${WORKSPACE_HXP_APP_PATH} || exit 1
unzip -q -o "${WORKSPACE_HXP_ZIP_PATH}" -d "${WORKSPACE_HXP_APP_PATH}" || exit 1
echo "✅ done Unzipping"

echo "Removing the .env file if present"
rm -f ${WORKSPACE_HXP_APP_PATH}/.env

# Our customers doesn't have access to our GH npm package repo, so we need to simulate this case!
unset GH_PACKAGES_READ_ONLY_TOKEN;
if [ -z "$GH_PACKAGES_READ_ONLY_TOKEN" ]; then
    echo "✅ GH_PACKAGES_READ_ONLY_TOKEN is not set."
else
    echo "❌ GH_PACKAGES_READ_ONLY_TOKEN should not be set. Customers don't have access to the internal packages through tokens..."
    exit 1;
fi

if grep -q "https://npm.pkg.github.com/" ${WORKSPACE_HXP_APP_PATH}/package-lock.json; then
    echo "❌ ${WORKSPACE_HXP_APP_PATH}/package-lock.json contains packages pointing to the (only internally accessible) https://npm.pkg.github.com npm registry. Customers doesn't have access to this registry."
    echo "Packages from the npm.pkg.github.com registry:"
    jq '.packages | to_entries[] | select(.value.resolved != null) | select(.value.resolved | startswith("https://npm.pkg.github.com/")) | .key' ${WORKSPACE_HXP_APP_PATH}/package-lock.json
    readlink -f ${WORKSPACE_HXP_APP_PATH}/package-lock.json
    jq '.packages | to_entries[] | select(.value.resolved != null) | select(.value.resolved | startswith("https://npm.pkg.github.com/"))' ${WORKSPACE_HXP_APP_PATH}/package-lock.json
    exit 1;
else
    echo "✅ ${WORKSPACE_HXP_APP_PATH}/package-lock.json does not contain packages pointing to the https://npm.pkg.github.com npm registry"
fi

# Check for public Infragistics packages because of licensing restrictions
if grep -q "https://registry.npmjs.org/igniteui-angular/" ${WORKSPACE_HXP_APP_PATH}/package-lock.json; then
    echo "❌ ${WORKSPACE_HXP_APP_PATH}/package-lock.json contains public packages from Infragistics https://registry.npmjs.org/igniteui-angular. This packages must not be used in the because of licensing restrictions."
    echo "Public packages from Infragistics:"
    jq '.packages | to_entries[] | select(.value.resolved != null) | select(.value.resolved | startswith("https://registry.npmjs.org/igniteui-angular/")) | .key' ${WORKSPACE_HXP_APP_PATH}/package-lock.json
    readlink -f ${WORKSPACE_HXP_APP_PATH}/package-lock.json
    jq '.packages | to_entries[] | select(.value.resolved != null) | select(.value.resolved | startswith("https://registry.npmjs.org/igniteui-angular/"))' ${WORKSPACE_HXP_APP_PATH}/package-lock.json
    exit 1;
else
    echo "✅ ${WORKSPACE_HXP_APP_PATH}/package-lock.json does not contain public packages from Infragistics https://registry.npmjs.org/igniteui-angular"
fi

# Check for private Infragistics packages because of licensing restrictions
if grep -q "https://packages.infragistics.com/npm/js-licensed/" ${WORKSPACE_HXP_APP_PATH}/package-lock.json; then
    echo "❌ ${WORKSPACE_HXP_APP_PATH}/package-lock.json contains private packages from Infragistics https://packages.infragistics.com/npm/js-licensed. This packages must not be used in the because of licensing restrictions."
    echo "Private packages from Infragistics:"
    jq '.packages | to_entries[] | select(.value.resolved != null) | select(.value.resolved | startswith("https://packages.infragistics.com/npm/js-licensed/")) | .key' ${WORKSPACE_HXP_APP_PATH}/package-lock.json
    readlink -f ${WORKSPACE_HXP_APP_PATH}/package-lock.json
    jq '.packages | to_entries[] | select(.value.resolved != null) | select(.value.resolved | startswith("https://packages.infragistics.com/npm/js-licensed/"))' ${WORKSPACE_HXP_APP_PATH}/package-lock.json
    exit 1;
else
    echo "✅ ${WORKSPACE_HXP_APP_PATH}/package-lock.json does not contain private packages from Infragistics https://packages.infragistics.com/npm/js-licensed"
fi

echo "🔧npm ci"
cd "${WORKSPACE_HXP_APP_PATH}" || exit 1
npm ci || exit 1
echo "✅ done npm ci"

echo "🔗LINK_ADF=${LINK_ADF}"
if [[ "$LINK_ADF" == true ]]; then
    echo "link-adf flag is used, move ADF dist packages to use ADF branch built version"
    AdfProjects=("testing" "cli" "core" "content-services" "process-services-cloud" "extensions")

    for project in ${AdfProjects[*]}; do
     echo "rm -rf ./node_modules/@alfresco/adf-$project/ && mkdir -p ./node_modules/@alfresco/adf-$project/ && cp -R ../alfresco-ng2-components/dist/libs/$project/* ./node_modules/@alfresco/adf-$project/"
     rm -rf ./node_modules/@alfresco/adf-$project/ && mkdir -p ./node_modules/@alfresco/adf-$project/ && cp -R ../alfresco-ng2-components/dist/libs/$project/* ./node_modules/@alfresco/adf-$project/
    done
fi

echo "👷🏼Test generators"
npx nx generate @hyland/extend:plugin --name custom-ui --author "John Snow" --addTranslations true || exit 1
npx nx generate @hyland/extend:page --pluginName custom-ui --pageName custom-ui-page || exit 1
npx nx generate @hyland/extend:form-widget --pluginName=custom-ui --formWidgetName=custom-widget-u3eky || exit 1
echo "✅ generators test"

echo "👷🏼Build Production"
npx nx run workspace-hxp:build:production || exit 1
echo "✅ done Build Production"

echo "👷🏼Simulating 'setenv' command with mock values (these can be copied from the admin application instance - 'Development configuration')"
echo '{
    "_customApp": {
        "__name": "Custom App",
        "scope": "my scope",
        "deployedApps": [
            {
                "name": "test-name"
            }
        ],
        "environmentId": "00000000-0000-0000-0000-000000000000",
        "studioClientId": "hxps:clientId",
        "contentHost": "https://hxps-rc-env2.content.dev.experience.hyland.com",
        "processHost": "https://hxps-rc.studio.dev.experience.hyland.com",
        "idpURL": "https://auth.iam.dev.experience.hyland.com/idp"
    }
}' > config/contexts.json5

npm run setenv || exit 1
echo "✅ simulating 'setenv'"

echo "👷🏼Copy dist back to main repo ${REPO_PATH}/dist"
CURRENT_PATH=$(realpath "$(pwd)")
cp -r $CURRENT_PATH/dist/workspace-hxp $REPO_PATH/dist
echo "✅Copy finished"
